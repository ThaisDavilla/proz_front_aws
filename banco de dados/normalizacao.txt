Normalização de esquemas de bancos de dados e formas normais

*Normalização de dados

A normalização de dados é um processo que foi criado em 1970, logo após o reconhecimento das formas normais, que são passos descritivos sobre a organização dos dados no banco de dados.

Em relação a normalizar um banco de dados, se pensa em um aumento de tabela, porque elas são desmembradas em outras mais específicas. Porém, isso pode aumentar o custo de manutenção e comprometer a performance inicial.

Portanto, a normalização deve ser realizada com bom senso, pois ela apresenta melhorias no banco a médio e longo prazo.

*Primeira Forma Normal

A normalização tem o objetivo de evitar anomalias nas tabelas. Ela é dividida em três formas normais.

*Na Primeira Forma Normal (1FN), não existem grupos de atributos repetidos e as suas relações não possuem atributos multivalorados ou relações aninhadas. 

Uma tabela 1FN deve estar de acordo com as seguintes informações:

 - os dados devem estar em valores atômicos, ou seja, indivisíveis;

 - ter apenas um dado por coluna;

 - deve existir pelo menos uma chave primária;

 - se existirem atributos multivalorados, uma nova tabela será criada;

 - se existirem atributos compostos, eles serão desmembrados em novas colunas de dados.

--Para que essa tabela esteja na 1FN, precisamos organizar alguns dados. Percebemos que nela existem atributos multivalorados, que são aqueles que podem ter mais de um valor, como o Contato, e atributos compostos, que são aqueles que podem ser divididos em atributos menores, como o Endereço. Então, é preciso modificar isso, pois não é permitido nesse tipo de forma normal.

--Nos atributos compostos ocorre a decomposição dos dados, em que cada dado é adicionado em uma coluna. Assim, o atributo endereço será subdividido em atributos menores.

--No caso dos atributos multivalorados, criamos uma nova tabela com os dados. Na nova tabela Contato, a chave primária é o identificador e a chave estrangeira é o CPF correspondente da tabela Pessoa. Se um CPF possuir dois contatos, eles devem ser apresentados em linhas diferentes na tabela Contato, como é o caso dos CPFs dos identificadores 4 e 5.

*Segunda Forma Normal

A Segunda Forma Normal (2FN) tem que estar, obrigatoriamente, na 1FN. Sendo assim, não deve ter atributos compostos ou multivalorados e nem dependências parciais. 

No caso das chaves primárias compostas, a 2FN exige que todas as relações tenham dependência total. Ou seja, uma chave primária composta determina funcionalmente os atributos, não podendo existir um atributo que depende apenas de uma parte dessa chave.

Portanto, na 2FN, os dados:

 - já estão na 1FN;

 - a chave primária precisa ser simples.

--Essa tabela está na 1FN, não possuindo dados multivalorados e nem atributos compostos. Portanto, como não está na 2FN, ela precisa de ajustes.

Nesta tabela, temos chaves primárias compostas, o IDENTIFICADOR e o IDENTIFICADOR_FUNÇÃO. Com o atributo NOME, conseguimos saber qual é o nome da pessoa, sendo um atributo que depende parcialmente da chave primária.

--Também conseguimos saber qual é a função da pessoa pelo número do identificador e a descrição pelo identificador da função. Com isso, podemos ter duas tabelas ao invés de apenas uma.

Para transformar essa tabela na 2FN, será necessário desmembrar alguns dados e construir outra tabela. Assim, nenhuma coluna depende parcialmente de outra.

--Para construir a outra tabela, é interessante montar o modelo conceitual para entendermos quais atributos ficarão em cada uma das tabelas.

--Para que a tabela original fique na 2FN, ela precisa ser dividida em duas. Com esse diagrama, temos a organização de como as duas tabelas seriam criadas com os seus devidos atributos para que não haja chave primária composta. No relacionamento das entidades, uma pessoa pode possuir uma ou várias funções e uma função pode ter uma ou várias pessoas envolvidas.

*Terceira Forma Normal

A Terceira Forma Normal (3FN) tem que estar, obrigatoriamente, na 2FN e possuir dependência exclusiva da chave primária da tabela. 

Todos os seus atributos  devem ser funcionalmente independentes.

Na 3FN, os dados:

 - devem estar na 2FN;

 - Os atributos não podem depender de outros que não são chaves.

--Exemplo da 3FN

Essa tabela não está na 3FN, pois os seus atributos não são todos dependentes. A Nota_fiscal é a chave primária e sabemos o Nome_vendedor através do Identificador_vendedor. Com isso, temos uma dependência. 

Para resolver isso, precisamos criar uma nova tabela com esses atributos que são dependentes.

--Agora, temos uma tabela Vendedor com a sua chave primária Identificador_vendedor e os nomes de cada vendedor.

--Os nomes dos vendedores são excluídos desta tabela, porém ela continua com o Identificador_vendedor, que se torna uma chave estrangeira nesta tabela, pois esse atributo é uma chave primária na tabela Vendedor.

*Forma Normal de Boyce-Codd (FNBC)

Cada forma normal é estritamente mais forte do que a anterior, então: 

 - toda relação da 2FN encontra-se na 1FN; e

 - toda  relação na 3FN encontra-se na 2FN.

*Forma Normal de Boyce-Codd (FNBC)

O mesmo acontece  com a Forma Normal de Boyce-Codd (FNBC). Toda relação FNBC está na 3FN.

Ela é uma melhoria da 3FN utilizada em casos onde a tabela apresenta mais de uma chave candidata.
A FNBC serve para separar, em novas tabelas, valores que ainda estejam redundantes do seu banco de dados.

Cada forma normal é estritamente mais forte do que a anterior, então: 

 - toda relação da 2FN encontra-se na 1FN; e

 - toda  relação na 3FN encontra-se na 2FN.

O mesmo acontece  com a Forma Normal de Boyce-Codd (FNBC). Toda relação FNBC está na 3FN.

Ela é uma melhoria da 3FN utilizada em casos onde a tabela apresenta mais de uma chave candidata.
A FNBC serve para separar, em novas tabelas, valores que ainda estejam redundantes do seu banco de dados.

-- Analisando essa tabela, conseguimos entender que:

 - descobrimos o professor se soubermos quem é o aluno e qual é a disciplina;

 - descobrimos qual é a disciplina se soubermos quem é o professor;

Assim, existem dependentes entre os atributos.

Para transformar essa tabela na FNBC, é necessário decompor as relações que são dependentes. Neste caso, essa tabela é decomposta da seguinte forma:

 - Professor, Disciplina;

 - Aluno, Professor.

-- Após a decomposição, temos uma tabela com a chave primária Professor e sua respectiva Disciplina.

-- Após a decomposição, temos outra tabela com a chave primária Aluno e Professor como chave estrangeira, pois, a partir do professor, podemos saber qual disciplina o aluno irá cursar.

Vimos no exemplo anterior como transformar uma tabela para a FNBC, utilizando a função de decompor os atributos, construindo novas tabelas para eliminar as dependências.












 

Para que uma tabela esteja na 1FN, cada linha deve representar um registro e cada célula deve conter um valor único.