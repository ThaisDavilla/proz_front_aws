Conceito da junção entre tabelas
(Inner Join, Left Join, Right Join e Full Join).

*Junção entre tabelas

O objetivo das junções entre tabelas é relacioná-las a partir de regras específicas.(https://halleyoliv.gitlab.io/pgdocptbr/tutorial-join.html)

Por exemplo, para fazer consultas em um banco de dados, é necessário relacionar tabelas.

A junção entre tabelas otimiza consultas básicas em um banco de dados.

Antes de conceituar a junção entre tabelas, é necessário compreender a teoria dos conjuntos (https://www.todamateria.com.br/teoria-dos-conjuntos/). Ela envolve os diagramas de Euler-Venn, que representam conjuntos graficamente (https://brasilescola.uol.com.br/matematica/diagrama-de-venn.htm).

As junções entre tabelas podem ser realizadas a partir de SQL Joins, como: Inner Join, Left Join, Right Join, Outer Join etc.

Para que haja a junção de tabelas, é necessário que o banco de dados tenha pelo menos duas tabelas criadas.

Para exemplificar isso, vamos criar um banco de dados chamado CursoDeProgramação. Nele, criaremos duas tabelas, sendo uma denominada disciplinas e outra, alunos.

--Criando o banco de dados
 Para criar o banco de dados, usaremos o comando:
create database CursoDeProgramacao;

Para usá-lo, iremos executar:

Use CursoDeProgramacao;

-----A tabela disciplinas possui os seguintes dados como atributos:

id_disciplina - o identificador da tabela e chave primária;

nome_disciplina - o nome de cada disciplina;

nome_professor - o nome de cada professor das disciplinas.

Para criar essa tabela no banco de dados, usaremos o comando create table.

------Também usaremos o comando create table para criar a tabela alunos no banco de dados.

Ela possui como atributos os dados:

id_alunos - o identificador da tabela e chave primária;

nome_alunos - o nome de cada aluno;

disciplinas_id - atributo que será associado ao id_disciplinas da tabela disciplinas. Portanto, é uma chave estrangeira.

*Inserindo dados nas tabelas
Para inserir dados em cada uma dessas tabelas, utilizamos o comando insert into, informamos o nome da tabela com os nomes das colunas e, depois, assinalamos quais dados serão inseridos em cada coluna.

**Inner Join

Esse método retorna os registros que são comuns entre as tabelas.

Assim, uma consulta realizada com o método Inner Join retornará o que as tabelas de alunos e disciplinas possuem em comum.

**Inner Join em código
Para utilizar o Inner Join, é necessário informar os nomes das colunas que serão utilizadas das duas tabelas. Após o comando from, informamos o nome da primeira tabela a ser analisada e, depois do método Inner Join, adicionamos o nome da segunda tabela a ser analisada.

selected nome_alunos, nome_disciplina from alunos
inner join disciplinas
on disciplinas.id_disciplina = alunos.disciplinas_id;

Em seguida, fazemos a ligação entre as chaves de cada tabela. Na tabela disciplinas, existe uma chave primária, chamada de id_disciplina, que é referenciada na tabela alunos por meio da chave estrangeira disciplinas_id.

O resultado da consulta realizada no código anterior apresenta o nome dos alunos que cursam alguma disciplina. Ou seja, é a interseção entre as tabelas. Os alunos que não cursam nenhuma das disciplinas citadas não são exibidos nessa consulta.

*Left Join

Esse método apresenta todos os registros que estão em uma tabela, mesmo que não tenham ligação com a outra. Além disso, ele apresenta os registros em comum entre as tabelas.

Ao realizar uma consulta com o Left Join, todos os dados da tabela à esquerda serão mostrados.
 
Com o código do Left Join, serão apresentados os dados da tabela alunos e os dados da interseção entre as duas tabelas.

selected nome_alunos, nome_disciplina
from
alunos left join disciplinas
on disciplinas.id_disciplina = aluno.disciplinas_id;

Independente se o aluno cursa ou não uma disciplina, todos os alunos são mostrados como resultado, pois essa é a tabela que se mantém à esquerda.
 
*Right Join
Esse método apresenta todos os registros que estão em uma tabela, mesmo que não tenham ligação com a outra. Além disso, ele mostra os registros em comum entre as tabelas.

Ao realizar uma consulta com o Right Join, todos os dados da tabela à direita serão mostrados.

Assim, com o código do Right Join, serão apresentados os dados da tabela disciplinas e os dados da interseção entre as duas tabelas.

selected nome_alunos, nome_disciplina from
alunos right join disciplinas
on disciplinas.id_disciplina = alunos.disciplinas_id;

Independente se a disciplina possui ou não alunos, todas as disciplinas são mostradas como resultado, pois essa é a tabela que se mantém à direita.
 
*Outer Join, Full Outer Join ou Full Join
Esse método apresenta todos os registros que estão nas duas tabelas.

Realizando uma consulta com esse método, teremos como resultado todos os dados de ambas as tabelas, independente se o aluno cursa alguma disciplina ou se a disciplina possui alunos. 

Esse método pode não existir nas consultas de alguns Sistemas de Gerenciamento de Banco de Dados, como o MySQL. Assim, para apresentar os dados da tabela, precisamos informar que queremos os dados da tabela à esquerda, ou seja, da tabela que está em Left Join. Depois, juntamos os dados desta tabela com os dados da tabela Right Join. Por isso, temos o comando union, que une os dados de ambas as tabelas e os apresenta como resultado. 

select nome_alunos, nome_disciplina from
alunos left join disciplinas
on disciplinas.id_disciplina = alunos.disciplinas_id
union
select nome_alunos, nome_disciplina from
alunos right join disciplinas
on disciplinas.id_disciplina = alunos.disciplinas_id;

Como resultado dessa consulta, obtemos todos os dados de ambas as tabelas.

*Conclusão

O conceito de junção entre tabelas é fundamental para o contexto dos bancos de dados. Isso porque é por meio dos métodos de análise que podemos coletar informações específicas em um conjunto de tabelas.

Para relacionar as tabelas, podemos utilizar a ligação entre chaves estrangeiras ou efetuar uma ligação entre colunas de mesmo nome em tabelas diferentes.
 

 

 

 

 

 


 

 

 

 

 

 

 


 

 

 

 

 

 


 

 

 

 

 

 

 

 













