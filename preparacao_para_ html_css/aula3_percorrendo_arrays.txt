Percorrer arrays (Python)

Como vimos previamente, acessar um elemento de um array não é nada difícil. Mas se quisermos acessar todos os elementos de um array? Para arrays pequenos, a seguinte solução funcionaria perfeitamente:

lista_frutas = ['maçã', 'banana', 'pera']

print(lista_frutas[0])
print(lista_frutas[1])
print(lista_frutas[2])

# Imprimirá:
# maçã
# banana
# pera

Mas para arrays com 10, 30, ou 200 items? Seria uma tarefa bastante repetitiva, certo? E como podemos simplificar tarefas repetitivas…? Precisamente, com estruturas de repetição! Para demonstrar uma versão mais simples do exemplo anterior, usaremos um for loop:

lista_frutas = ['maçã', 'banana', 'pera']

for i in range(3):
print(lista_frutas[i])

# Imprimirá:
# maçã
# banana
# pera

A lógica é a seguinte, se você lembrar, a função range pode receber até três argumentos que representam: o valor inicial do contador, a condição de parada, o incremento do contador. Se, ao invés de passarmos os três valores, passarmos apenas um valor como argumento, ele representará a condição de parada. No exemplo acima, a condição de parada é 3, em outras palavras, que o contador seja menor que 3 (i < 3). Como não passamos mais argumentos, a função range() atribui um valor padrão para o valor inicial e o incremento do contador. Estes valores por padrão são 0 e +1, respectivamente.

Dessa forma, ao usar a função range(3) os elementos para nossa estrutura de repetição ficam assim:

 - Valor inicial do contador = 0

- Condição de parada = contador < 3

- Incremento do contador = 1

Na primeira volta do loop, o contador (representado pela variável ‘i’) tem valor 0. Por esse motivo, se imprimirmos lista_frutas[i] estamos dizendo na verdade lista_frutas[0] e o valor impresso é ‘maçã’. Ainda nessa volta, aplicamos o incremento, que neste caso é 1, por tanto o contador tem agora o valor 1.

Na segunda volta, então, o contador começa com o valor 1, e assim, ao imprimir lista_frutas[i] novamente, estamos dizendo na verdade lista_frutas[1] e imprimindo o valor ‘banana’. Mais uma vez, aplicamos o incremento, e o contador passa a ter o valor 2.

O processo se repete na terceira volta, e o valor resultante é ‘pera’. Contudo, ao aplicar o incremento mais uma vez, nosso contador passa a ter o valor 3. Como nossa condição de parada foi definida como 3, nossa estrutura de repetição testa a condição de parada: contador(3) < 3. Como o resultado dessa comparação é falso (pois três não é menor que três), o ciclo de repetição acaba.

Finalmente, conseguimos resolver o problema de aplicar a mesma operação um por um, em todos os elementos do nosso array. Porém, ainda foi necessário escrever o número ‘3’ para a condição de parada, pois sabíamos que nosso array lista_frutas tem 3 elementos. Mas como você faria isso com o seguinte exemplo?

lista_num = [2, 45, 65, 78, 126, 987, 457, 345, 679, 107, 2345, 452, 3, 34, 560]

Será que existe alguma forma mais simples para saber a quantidade de elementos de um array…? Exatamente! Para isso, temos a função len(). Dessa forma, ao invés de escrever o seguinte código:

lista_num = [2, 45, 65, 78, 126, 987, 457, 345, 679, 107, 2345, 452, 3, 34, 560]

for i in range(15):
print(lista_num[i])

Podemos fingir que não perdemos tempo contando quantos elementos tinha o array lista_num e substituímos o número ‘15’ que está como argumento da função range() pela função len(lista_num).


Dessa forma, independentemente da quantidade de elementos que um vetor tiver, conseguiremos percorrer todos eles usando: uma estrutura de repetição, e a função len().


lista_num = [2, 45, 65, 78, 126, 987, 457, 345, 679, 107, 2345, 452, 3, 34, 560]

for i in range(len(lista_num)):
print(lista_num[i])














