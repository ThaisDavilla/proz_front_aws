Manipular arrays

Alterar dados usando índices

Existem muitas formas de manipular os dados de um vetor, e cada linguagem de programação tem geralmente funções nativas que permitem inserir, alterar, deletar ou ordenar os elementos de um array.

Por enquanto, não nos aprofundaremos nessas funções, mas apenas numa forma simples de alterar o valor dos items de um array. Supondo que conferimos nosso vetor de frutas favoritas, e percebemos que não gostamos mais de maçã:

ista_frutas = ['maçã', 'banana', 'pera']

Sabendo que ‘maçã’, nesse caso está na primeira posição do array, e que os índices do array começam a partir do número 0, podemos “acessar” o item na posição [0] e usar o operador de atribuição ‘=’ para substituir o valor atual:

lista_frutas = ['maçã', 'banana', 'pera']
print(lista_frutas)
# Imprimirá: ['maçã', 'banana', 'pera']

lista_frutas[0] = 'melancia'
print(lista_frutas)
# Imprimirá: ['melancia', 'banana', 'pera']

Imagina agora que demos uma olhada na nossa lista novamente e percebemos que também não gostamos mais de bananas nem de peras. Poderíamos realizar o passo anterior mais duas vezes, mas Python nos permite simplificar um pouco esse processo acessando mais de um item por vez, separando eles por vírgulas e usando um único operador de atribuição:


lista_frutas = ['melancia', 'banana', 'pera']
print(lista_frutas)
# Imprimirá: ['melancia', 'banana', 'pera']

lista_frutas[1], lista_frutas[2] = 'morango', 'abacaxi'
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi']

Perceba que a primeira string após o operador de atribuição, ‘morango’, é atribuído ao primeiro elemento antes do operador de atribuição, lista_frutas[1]; e a segunda string é atribuída no segundo elemento respectivamente.

Podemos inclusive atribuir o valor de um elemento do array, a outro elemento do mesmo array! Imagine que gostamos tanto de melancia, que queremos que os dois primeiros itens da nossa lista sejam ‘melancia’. Podemos fazer isso da seguinte forma:


lista_frutas = ['melancia', 'morango', 'abacaxi']
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi']

lista_frutas[1] = lista_frutas[0]
print(lista_frutas)
# Imprimirá: ['melancia', 'melancia', 'abacaxi']


Adicionar e remover elementos

Agora vamos aprender a usar duas funções nativas de Python para adicionar e remover itens de um array. A primeira delas é a função append(), que em inglês significa “anexar” ou “acrescentar”. Para usá-la basta escrever o nome do array ao qual queremos adicionar um item, seguido de um ponto ‘.’, o nome da função, e o item a ser adicionado dentro dos parênteses:


lista_frutas = ['melancia', 'morango', 'abacaxi']
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi']

lista_frutas.append('kiwi')
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi', 'kiwi']

Como você pode ver, a função append() adiciona o elemento passado como argumento no final do nosso vetor.


E se quisermos remover o elemento que acabamos de adicionar? A função pop() vem para nos ajudar a resolver esse problema. Usamos ele da mesma forma que a função append(), porém, não precisamos passar nenhum argumento dentro dos parênteses. Assim, ele entenderá que o item a ser removido do array é o último.

lista_frutas = ['melancia', 'morango', 'abacaxi', 'kiwi']
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi', 'kiwi']

lista_frutas.pop()
print(lista_frutas)
# Imprimirá: ['melancia', 'morango', 'abacaxi']




































































