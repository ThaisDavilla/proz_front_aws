*Eventos de mouse

Introdução
Já vimos como permitir que o usuário clique em um botão para modificar um elemento capturado do DOM. Relembrando que, para isso, usamos um dos eventos mais comuns no dia a dia do desenvolvedor: o click.

Contudo, existem outros eventos do mouse que podemos usar para adicionar interatividade aos nossos sites. Veremos alguns deles!

*Setup de arquivos
Para demonstrar os diferentes tipos de eventos do mouse que podemos usar com a linguagem JavaScript, usaremos como exemplo um projeto simples com três arquivos: index.html, style.css e script.js.

O arquivo index.html segue o padrão de estrutura base da HTML, com os seguintes elementos dentro da tag <body></body>:

 
<button>Eventos de mouse</button>

<span>Passou o mouse por cima</span>

<section>

  Texto dinâmico

</section>

*Além disso, dentro da tag <head></head>, incluímos outras tags para conectar o arquivo HTML com os arquivos style.css e script.js, que estão na mesma pasta que o arquivo index.html.

<link rel="stylesheet" href="style.css">

<script src="script.js" defer></script>

*O arquivo style.css tem os seguintes blocos de declaração:

span {

  opacity: 0;

  transition: all 0.3s;

}

section {

  margin-top: 1rem;

}

*Para o elemento span, usamos a propriedade opacity para definir a opacidade ou a transparência do elemento, passando valores entre 0 (completamente transparente) até 100 (completamente opaco).

Também usamos a propriedade transition para definir que todas as propriedades alteradas no elemento de valor all deverão ter uma transição de 0.3 segundos, com valor 0.3s.

*Finalmente, no arquivo script.js, usamos o método querySelector() para capturar três elementos do DOM e salvá-los em variáveis com os nomes das suas respectivas tags HTML. Para isso, as linhas de código devem ser:

let button = document.querySelector("button");

let span = document.querySelector("span");

let section = document.querySelector("section");

*Evento mouseover
Nesse exemplo, mostraremos o uso dos quatro principais eventos do mouse, usando o botão como elemento ativador e os elementos span ou section como elementos afetados. Primeiro, vamos trabalhar com o evento mouseover, que é disparado sempre que o cursor do mouse passa por cima de um elemento.

Agora, vamos criar a função mostrarSpan, que altera a propriedade opacity da propriedade style do elemento span.

function mostrarSpan(){

  span.style.opacity = "100"

}

*Depois disso, logo embaixo da função criada, chamamos o elemento button e aplicamos o método addEventListener() nele, que deve receber dois argumentos. O primeiro será a string mouseover e o segundo, o nome da função mostrarSpan, sem os parênteses, pois estamos apenas passando-a como argumento. Dessa forma:

function mostrarSpan(){

  span.style.opacity= "100"

}

button.addEventListener("mouseover", mostrarSpan);

*Após salvar as mudanças e abrir o arquivo index.html no navegador, devemos ver apenas o botão e Texto dinâmico embaixo dele. Ao passar o mouse por cima do botão, o texto Passou o mouse por cima deve aparecer ao lado do botão.

*Evento mouseout
Agora, o texto do nosso span aparece de forma dinâmica por cima do botão. Contudo, esse texto permanece visível mesmo se o cursor do mouse não estiver mais em cima do elemento.

Para corrigir isso, primeiro, devemos definir uma função para alterar a opacidade do span de volta para zero:

function ocultarSpan(){

  span.style.opacity = "0"

}

*Logo embaixo da função, aplicamos o método addEventListener ao elemento button, passando a string mouseout como primeiro argumento e a função ocultarSpan como segundo argumento.

function ocultarSpan(){

  span.style.opacity = "0"

}

button.addEventListener("mouseout", ocultarSpan);

*Após salvar as mudanças e voltar ao navegador, devemos ver o texto Passou o mouse por cima aparecendo quando o cursor do mouse passa por cima do botão e sumindo quando o cursor sai de cima dele.

*Evento click
O evento click é a junção de dois eventos do mouse: mousedown, que é disparado quando clicamos o botão esquerdo do mouse, e mouseup, que é disparado quando soltamos esse mesmo botão.

Assim, click é o ato de apertar e soltar o botão esquerdo do mouse sobre algum elemento. Para exemplificar, vamos começar criando uma função para alterar o conteúdo textual do nosso section.

function fazerUmClick(){

  section.innerText = "Fez um click simples!"

}

*Agora, basta usar o método addEventListener no elemento button, passando a string click como primeiro argumento e a função fazerUmClick como segundo argumento. Assim:

function fazerUmClick(){

  section.innerText = "Fez um click simples!"

}

button.addEventListener("click", fazerUmClick);

*Evento dblclick
O duplo click, ou dblclick, é o último evento que veremos. Ele não é muito comum, mas pode ser útil em determinadas situações. Seguindo o padrão dos outros três eventos, começamos declarando uma função para alterar o conteúdo textual do section.

function fazerDoisClicks(){

  section.innerText = "Fez um duplo click!"

}

*Depois, aplicamos o método addEventListener ao elemento button, passando a string dblclick como primeiro argumento e a função fazerDoisClicks como segundo argumento.

function fazerDoisClicks(){

  section.innerText = "Fez um duplo click!"

}

button.addEventListener("dblclick", fazerDoisClicks);

*Conclusão
Conseguiu aprender os quatro principais eventos de interatividade? Existem outros eventos de click que podemos usar nos nossos sites. Se você quiser conferi-los ou entender a diferença entre os eventos mouseout e mouseleave, confira as leituras complementares!


























