*Funções em JS

As funções em JS funcionam exatamente da mesma forma que em Python. Elas podem ou não receber argumentos, elas podem ter um return no meio do bloco de código que retorna um resultado, e elas podem incluir todos os conceitos estudados previamente dentro de seus blocos de código (arrays, declaração de variáveis, estruturas condicionais, estruturas de repetição, e até outras funções!).

A principal diferença entre o uso de funções no JS e no Python, é a sintaxe na declaração de funções.

*Funções regulares

A forma mais comum de declarar uma função em JS é usando:

A palavra reservada ‘function’

O nome da função

Parênteses para receber parâmetros (mesmo se não for receber, é necessário escrevê-los)

Chaves com o bloco de código a ser executado quando a função for chamada.

*Segue um exemplo de uma função regular, sem parâmetros, que imprime uma mensagem de boas-vindas quando executada:


function cumprimentar(){

    console.log("Boas-vindas!")

}

cumprimentar();

// Imprimirá "Boas-vindas!"


*Obs. Lembra que para executar o bloco de código de qualquer função é necessário declarar ela, e depois chamá-la, escrevendo apenas o nome da função seguida de parênteses (com argumentos, caso precisar deles).

*O próximo exemplo é uma função que recebe dois números como argumentos, e retorna a multiplicação de ambos:

function multiplicar(num1, num2){

    return (num1 * num2);

}

multiplicar(3, 7);

// Imprimirá 21, que é o resultado de (3 * 7)

*Funções anônimas

Outra forma de declarar funções em JS é usando funções anônimas. Estas funções não possuem um nome quando declaradas, e são geralmente atribuídas a uma variável que guarda a função como seu valor.

O seguinte exemplo mostra a mesma função sendo declarada de forma regular, e com uma função anônima:

// Função regular

function somar(a, b){

    return (a + b);

}

// Função anônima

const adicionar = function(a, b){

    return (a + b);

}


*Para chamar uma função anônima, basta chamar o nome da variável que a guarda, seguida de um par de parênteses (com argumentos, caso precisar deles)

const somar = function(a, b){

    return (a + b);

}

somar(5, 9);

// Imprimirá 14, que é o resultado de (5 + 9)

*Arrow functions (opcional)

A linguagem JavaScript nos oferece uma terceira sintaxe para escrever funções: as arrow functions (do inglês “função de seta”). Elas são uma sintaxe mais moderna de funções anônimas, e foram pensadas principalmente para simplificar a escrita de funções, chegando inclusive a escrevê-las numa única linha de código.

*Comecemos escrevendo a mesma função anônima da forma tradicional, e depois como arrow function:

// Função anônima declarada de forma tradicional

const seguinteNum = function(n){

    return (n + 1);

}

 
// Arrow function

const proximoNum = (n) => {

    return (n + 1)

}

*A primeira diferença que percebemos é que não precisamos da palavra reservada function. A segunda diferença, é que escrevemos “uma seta gorda” com os símbolos ‘=’ e ‘>’ entre os parâmetros e o bloco de código (Obs. embora se escrevam de forma semelhante, não devemos confundir a seta das arrow function, com o operador “menor ou igual”, que se escreve com os símbolos ‘<’ e ‘=’).

*Ambas as funções realizam exatamente a mesma função: retornar o número inteiro seguinte ao número que recebem como argumento. Porém, é possível simplificar ainda mais a sintaxe da arrow function:

// Arrow function

const proximoNum = n => return (n + 1)

*Agora podemos perceber mais duas mudanças. Em primeiro lugar, quando temos um único parâmetro, não precisamos dos parênteses na hora de declarar a arrow function. Em segundo lugar, quando escrevemos o bloco de código na mesma linha em que temos a seta da arrow function, não precisamos das chaves para encapsular o bloco de código a ser executado.

*Finalmente, podemos aplicar uma última “simplificação do código”:

// Arrow function

const proximoNum = n => (n + 1)

Da mesma forma que com as chaves, quando temos o bloco de código na mesma linha de código que a seta não precisamos do return.

*Vale lembrar que o uso de arrow functions é completamente opcional. É perfeitamente possível escrever as mesmas funções de forma anônima, ou de forma regular. Contudo, o uso das arrow function tem ficado muito popular entre a comunidade de desenvolvedores de JS, e por isso é importante sabermos pelo menos reconhece-las e interpretá-las.






















