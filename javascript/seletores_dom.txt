*Seletores DOM

O DOM, das siglas em inglês “Document Object Model” (ou “Modelo de Objeto do Documento” em português), é um modelo que representa os elementos exibidos numa página web. A ligação do DOM com nossos arquivos HTML é de dupla mão: quando um elemento HTML é criado, uma representação dele no DOM é criado, e se alteramos alguma representação no DOM seu respectivo elemento HTML sofrerá as mesmas alterações no navegador. E quem nos ajudará a manipular o DOM? Você provavelmente já sabe a resposta: JavaScript!

*Setup de arquivos

Para entender melhor como podemos acessar o DOM, comecemos criando uma nova pasta chamada seletores-dom, criemos o arquivo index.html com a estrutura base HTML, e adicionemos nele os seguintes elementos dentro da tag body:

<body>

  <h2>Este é o primeiro h2</h2>

  <div>

    Esta é uma div

  </div>

  <div>

    <h2>Este é o segundo h2</h2>

    <p>

      Este é um parágrafo dentro da segunda div

    </p>

  </div>

</body>


Como você pode ver temos 5 elementos HTML. No “primeiro nível” temos um elemento h2, e duas divs. No “segundo nível” temos os “filhos” da segunda div: um segundo elemento h2 e um elemento de parágrafo. Agora, adicionemos um id com o valor “titulo” ao primeiro elemento h2, e a class “texto-simples” à primeira div e ao elemento de parágrafo:

<body>

  <h2 id="titulo">Este é o primeiro h2</h2>

  <div class="texto-simples">

    Esta é uma div

  </div>

  <div>

    <h2>Este é o segundo h2</h2>

    <p class="texto-simples">

      Este é um parágrafo dentro da segunda div

    </p>

  </div>

</body>

Criemos agora o arquivo script.js e conectemos ambos arquivos adicionando a seguinte tag script dentro da tag head do nosso arquivo index.html com o atributo defer:

 

<head>

  ...

  <script src="script.js" defer></script>

  <title>Seletores DOM</title>

</head>

 

Obs. Os três pontos representam as tags meta

Criemos agora o arquivo script.js e conectemos ambos arquivos adicionando a seguinte tag script dentro da tag head do nosso arquivo index.html com o atributo defer:

 

<head>

  ...

  <script src="script.js" defer></script>

  <title>Seletores DOM</title>

</head>

 

Obs. Os três pontos representam as tags meta

Precisamos agora ir no navegador, e abrir os Dev Tools fazendo click direito na página e selecionando Inspecionar ou com a o atalho de teclado F12. Após abrir a aba “Console” das Dev Tools devemos ver a nossa mensagem no terminal:

Caso não consiga ver a mensagem no terminal, verifique que o nome do arquivo (“script.js”) e o atributo src da tag script no arquivo index.html estão escritos da mesma forma. Outro possível motivo para não exibir a mensagem e não ter salvo as alterações em ambos arquivos.

*Acessando a DOM por ID e Classe

Para acessar os elementos do nosso arquivo HTML usaremos o objeto document criado pelo DOM. Este objeto tem uma série de propriedades que nos retornam informações sobre nossa página, como por exemplo a URL, ou os cookies.

Neste caso, usaremos quatro métodos (funções guardadas em um objeto) para acessar os elementos da DOM. Os dois primeiros são:

getElementById() - retorna o elemento que tem o ID com o valor especificado

getElementByClassname()- retorna um HTMLCollection com todos os elementos que contém a class especificada.

De volta no arquivo script.js, começamos declarando uma variável que guardará o retorno do primeiro método, e atribuímos a ele o objeto document:

const titulo = document

Se imprimirmos a variável titulo neste ponto, poderemos ver todas as informações que guarda o objeto document:

const titulo = document

console.log(titulo);

Contudo, a gente não quer salvar todas essas informações na nossa variável titulo, senão apenas o elemento h2 com id “titulo”. Para isso, usaremos o método .getElementById() do objeto document e passaremos como argumento a string “titulo”.

const titulo = document.getElementById("titulo");

console.log(titulo);

Vale lembrar que dois elementos não devem ter o mesmo valor de ID numa mesma página, portanto, o método .getElementById() procura apenas um elemento.

E se quisermos acessar vários elementos de uma só vez? Nossa primeira opção é usar o método .getElementsByClassName(), passar como argumento a string “texto-simples”, e guardar o retorno numa variável. Usemos o console.log() para imprimir essa variável:

const textos = document.getElementsByClassName("texto-simples");

console.log(textos);

Dessa vez, se conferirmos o terminal, teremos um resultado um pouco diferente: um HTMLCollection. As HTMLCollection são semelhantes (porém, não iguais) a arrays. Ao lado do termo HTMLCollection podemos ver um número 2 entre parênteses, indicando que é uma lista com dois elementos. Podemos ver também ambos os elementos entre chaves e separados por uma vírgula (seguindo a sintaxe de um array): uma div e um parágrafo com a classe “texto-simples”.

Podemos acessar um por um os elementos da HTMLCollection da mesa forma como acessaríamos elementos de um array: escrevendo o nome da variável que guarda a lista, e passando o índice de cada elemento entre chaves. Se quisermos acessar, por exemplo, o primeiro elemento da lista, usaríamos a seguinte linha de código:

console.log(textos[0]);

*Acessando a DOM com seletores CSS

Os métodos anteriores são úteis se quisermos acessar elementos com id, ou com a mesma classe, porém, às vezes precisamos fazer seleções mais específicas. Uma solução é atribuir IDs e classes a todos os elementos que quisermos acessar, mas muitos desenvolvedores preferem usar os próprios seletores CSS para não poluir o arquivo HTML com um monte de atributos desnecessários ou redundantes.

Para fazer isso, usaremos os seguintes dois métodos:

querySelector() - retorna o primeiro elemento no documento que segue a especificação de um seletor css

querySelectorAll() - retorna uma NodList com todos os elementos no documento que seguem a especificação de um seletor css.

Dessa vez, queremos acessar o segundo elemento h2 da nossa página. Se você conferir o arquivo index.html perceberá que ele não tem nenhuma classe nem id como atributos. Para acessar ele, já que é o elemento filho de uma div, usaremos o aninhamento de dois seletores CSS: “div h2”. O único que precisamos fazer é usar o método .querySelector(), passar essa mesma string como argumento, e salvar o retorno numa variável

const segundoTitulo = document.querySelector("div h2");

console.log(segundoTitulo);

Finalmente, vamos acessar os mesmos elementos que acessamos no segundo exemplo da seção anterior (a div e o parágrafo com a classe “texto-simples”) para demonstrar duas diferenças chave entre ambas abordagens. Usaremos o método .querySelectorAll() e passaremos como argumento a string “.texto-simples”. Perceba que neste caso, como estamos usando um seletor CSS, devemos preceder o nome da classe com um ponto. Da mesma forma, se quisermos acessar um elemento via ID, o valor do id seria precedido por um símbolo de sustenido ‘#’ (ex. “#titulo”).

const textosPorClasse = document.querySelectorAll(".texto-simples");

console.log(textosPorClasse);












