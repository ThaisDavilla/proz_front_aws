Capturar informações do evento

Introdução
Até o momento, usamos eventos apenas para acionar alguns comportamentos. Contudo, cada evento possui uma série de informações que podem ser necessárias para definir alguns comportamentos, como o tipo de evento (por exemplo, o click), a posição do mouse na tela quando o evento é realizado, sobre qual elemento foi feita a ação etc. Veremos como acessar duas dessas propriedades e alguns exemplos de aplicação.

Alguns sites mostram efeitos diferentes quando clicamos com o mouse. Para saber onde exibir esses efeitos, precisamos das "coordenadas" horizontais e verticais do evento.

*Setup de arquivos

Para mostrar algumas das informações que os eventos nos retornam, usaremos como exemplo um projeto simples com dois arquivos: index.html e script.js. O arquivo index.html segue o padrão da estrutura base da HTML e tem os seguintes elementos dentro da tag <body></body>:

Os elementos span são do tipo inline. Usaremos eles para inserir conteúdo textual em linguagem JavaScript dentro do elemento h2.

Definimos também o id de três elementos para facilitar a captura deles via DOM.

Além disso, dentro da tag <head></head>, incluímos a tag <script src="script.js" defer></script> para conectar o arquivo HTML com o arquivo script.js, que está na mesma pasta que o arquivo index.html.

*Para adiantar, no arquivo script.js, capturamos todos os elementos do DOM que usaremos, empregando o método getElementById():

let elementoClicado = document.getElementById("elemento-clicado");

let botaoTempo = document.getElementById("botao-tempo");

let tempo = document.getElementById("tempo");

*Propriedade timeStamp
A propriedade timeStamp retorna um número que representa o tempo transcorrido desde a renderização da página até o momento em que o evento aconteceu. Essa informação pode ser útil para provas on-line, onde cada questão tem um tempo máximo permitido para escolher a resposta.

Para utilizá-la, começamos aplicando o método addEventListener() ao elemento botaoTempo, passando o evento do tipo click como primeiro argumento:


botaoTempo.addEventListener("click", );

*Para o segundo parâmetro, declaramos diretamente uma função anônima dentro dos parênteses do addEventListener(). Lembrando que também é possível declarar essa função fora dos parênteses.

botaoTempo.addEventListener("click", function(){

});

O primeiro parâmetro é uma string com o tipo do evento que queremos escutar.

O segundo parâmetro é a função que define o que deve acontecer quando o evento é disparado.

*Para acessar as propriedades do evento, devemos declarar a função anônima com um parâmetro dentro dos parênteses dela.

botaoTempo.addEventListener("click", function(evento){

});

*Este parâmetro representa um objeto com todas as propriedades do evento. Por isso, é comum chamá-lo de evento ou de e.

*No terminal, podemos imprimir todas as propriedades que o evento guarda. Para isso, basta fazer um console.log( ) e passar o parâmetro evento como argumento:

botaoTempo.addEventListener("click", function(evento){

  console.log(evento);

});


*Depois de salvar as mudanças, abrir nosso projeto no navegador e clicar no botão Tempo, devemos ver um objeto chamado PointerEvent no terminal. Ele representa o evento em si.

Se clicarmos na seta à esquerda dele, veremos uma lista em ordem alfabética com todas as propriedades que o evento guarda. Observe a imagem.

*A propriedade timeStamp está quase no fim da lista. Podemos vê-la retornando um número do tipo float, que representa a quantidade de milissegundos desde a renderização da página até o momento em que fizemos click no botão e disparamos o evento.

O número retornado pode ser convertido em segundos. Para isso, divida ele por mil e arredonde o resultado.

*Voltando para o arquivo script.js, sabemos que o parâmetro evento salva uma série de propriedades.

Assim, para acessar a propriedade timeStamp, é preciso usar uma dot notation. Já para imprimir o valor da timeStamp, atualizamos o argumento que passamos no console.log:

botaoTempo.addEventListener("click", function(evento){

  console.log(evento.timeStamp);

});

*Após salvar as mudanças e voltar ao navegador, cada vez que apertarmos o botão devemos ver um novo valor em milissegundos no terminal:

*Finalmente, precisamos exibir esse valor no corpo da página. Para isso, atribuímos ele à propriedade innerText do elemento tempo, que foi previamente capturado do DOM.

botaoTempo.addEventListener("click", function(evento){

  console.log(evento.timeStamp);

  tempo.innerText = evento.timeStamp;

});

*Depois de salvar as mudanças e voltar no navegador, cada vez que clicamos no botão devemos ver o valor em milissegundos sendo apresentado e atualizado no primeiro elemento <p>:

*Propriedade target
*A propriedade target nos permite acessar informações e propriedades do elemento que ativou o evento ou de qualquer um de seus elementos filhos, que não necessariamente foram capturados do DOM.

Para isso, é preciso usar um dos métodos estudados, o getElementById ou o QuerySelector, por exemplo. Uma vez que temos acesso ao elemento, podemos manipular ele à vontade.

*Um exemplo do uso da propriedade target é quando passamos o mouse por cima de um elemento no YouTube e ele passa a mostrar uma prévia do vídeo.

*Neste exemplo, usaremos o próprio DOM como elemento pai, mas poderíamos definir o mesmo comportamento, por exemplo, para uma lista ordenada de itens.

Começamos aplicando o método addEventListener() ao objeto Document e passando o evento do tipo click como primeiro argumento. Como segundo argumento, passamos uma função anônima com o argumento e, de evento.

document.addEventListener("click", function(e){

});

*Dentro da função, acessamos a propriedade target do evento (parâmetro chamado de e), e o imprimimos no terminal para entender o seu funcionamento:

document.addEventListener("click", function(e){

  console.log(e.target)

})


*Após salvar as mudanças e voltar no navegador, podemos clicar nos elementos da página. Eles vão aparecendo no terminal conforme clicamos neles.

*Em situações reais, no lugar do Document é recomendável usar um único elemento ou apenas um pai com os elementos filhos que queremos capturar.

*Como você pode ter observado, a propriedade target retorna o elemento que disparou o evento, no nosso caso, o click.

De volta ao VSCode, vamos querer mostrar na tela só o id daqueles elementos que foram clicados. Para isso, usamos a propriedade id da propriedade target (e.target.id) e atribuímos ele ao innerText do elementoClicado, que foi previamente capturado no DOM:

document.addEventListener("click", function(e){

  console.log(e.target)

  elementoClicado.innerText = e.target.id

})

*Ao salvar as mudanças e voltar no navegador, deveríamos ver o id subtitulo, botao-tempo e tempo ao clicarmos nos seus respectivos elementos.

*Conclusão
Embora a propriedade target seja a mais usada para acessar as informações do elemento que disparou o evento, outras propriedades (como timeStamp, clientX, clientY, type) podem ser usadas para trabalhar com informações do evento em si.















































