*innerText e innerHTML

Agora que sabemos como acessar nossos elementos HTML com a linguagem JavaScript através do DOM, vamos ver como manipulá-los. Para isso, aprenderemos a trabalhar com duas propriedades simples e eficientes do JavaScript: innerText e innerHTML.

innerText - Retorna o texto sem formatação e sem elementos HTML.

innerHTML - Retorna o texto com formatação e com elementos 

*Setup de arquivos

Além disso, dentro da tag <head></head>, para conectá-la com o arquivo script.js que está na mesma pasta que o arquivo index.html, incluímos a tag:

<script src="script.js" defer ></script>

 
Por enquanto, o arquivo script.js está vazio e será nele que aprenderemos a usar as propriedades innerText e innerHTML.


*Acessando a propriedade innerText

Primeiro, abrimos nosso arquivo script.js e guardamos o elemento <h1> na variável chamada elementoH1, usando qualquer um dos quatro métodos aprendidos para acessar elementos do DOM.

Neste caso, usaremos o método querySelector(), passando a string h1 como argumento.

Depois, imprimimos o elementoH1 no terminal do navegador usando o método console.log().

let elemento = document.querySelector("h1")

console.log(elementoH1)

*Após salvar as mudanças no arquivo, abrir o arquivo index.html no navegador usando a extensão Live Server, e abrir o terminal Console no navegador, devemos ver o seguinte:

<h1>Título da página<h1>

De volta ao arquivo script.js, usamos a função dot notation para acessar as propriedades, adicionando um ponto ao elemento capturado do DOM seguido do nome da propriedade (innerText ou innerHTML, respeitando as letras maiúsculas e minúsculas).

Depois, executamos mais um console.log() logo embaixo do primeiro, mas acessando a propriedade .innerText:

let elementoH1 = document.querySelector("h1");

console.log(elementoH1);
console.log(elementoH1.innerText);

*Após salvar as mudanças e verificar o terminal no navegador, devemos ver o seguinte resultado:

<h1>Título da página<h1>
Título da página

*Na segunda linha, a propriedade innerText retorna apenas o texto contido entre as tags de abertura e de fechamento do elemento capturado do DOM.

*Acessando a propriedade innerHTML

Para demonstrar o uso da próxima propriedade, guardaremos o elemento <main> na variável elementoMain. Para isso, usamos o método .querySelector e o imprimimos no terminal com mais um console.log().

let elementoMain = document.querySelector("main");
console.log(elementMain);

*Após salvar as mudanças, devemos ver o seguinte resultado no terminal do navegador:

<main>
<h2>Subtítulo do conteúdo principal</h2>
<section>
<p>...</p>
<p>...</p>
</section>
</main>

No arquivo script.js, vamos usar o console.log() mais duas vezes para imprimir nosso elementoMain, acessando as propriedades .innerText e .innerHTML:

let elementoMain = document.querySelector("main");

console.log(elementoMain);
console.log(elemento.innerText);
console.log(elementoMain.innerHTML);

*Podemos ver que, mais uma vez, a propriedade innerText retornou apenas o texto contido entre as tags de abertura e de fechamento <main> </main>. Assim, mostra os textos dos elementos filhos, separando-os dos outros com uma quebra de linha.


Já a propriedade innerHTML retornou uma representação textual de todo o conteúdo HTML entre as tags de abertura e de fechamento do elemento main, mostrando os nomes de classe dos elementos <p>.

*Manipulando o DOM com innerText

Além de acessar o conteúdo textual ou o conteúdo HTML dos elementos do DOM, podemos também manipular estes conteúdos usando as propriedades innerText e innerHTML. Até esse ponto, a nossa página tem a seguinte aparência:

*Podemos alterar, por exemplo, o texto do nosso elemento h1 acessando a propriedade innerText do elementoH1 e atribuindo a ele um novo valor com o operador de atribuição =, seguido do texto como uma string (escrito entre aspas simples ou duplas).

let elementoH1 = document.querySelector("h1");

elementoH1.innerText = "Novo título com JS";

*Após salvar as mudanças, podemos voltar ao navegador e ver o texto do nosso título atualizado.

*Da mesma forma, podemos manipular o conteúdo HTML do nosso site usando a propriedade innerHTML. Nesse caso, substituiremos o conteúdo do elementoMain para conter um elemento h2 com um texto diferente e uma lista não ordenada logo embaixo.

Para fazer isso, devemos acessar a propriedade innerHTML do elementoMain e atribuir uma string a ele contendo todo o conteúdo HTML desejado, de forma semelhante ao que escreveríamos no arquivo index.html.


*Para facilitar a leitura do valor atribuído, é possível usar o acento grave (`), usado para indicar crases, ao invés das aspas (“ ”). Assim, conseguimos quebrar a linha e organizar a nossa string da mesma forma que organizaríamos o nosso código HTML.

let elementoMain = document.querySelector("main")

elementoMain.innerHTML = `
....
`
*As propriedades innerText e innerHTML são simples e nos permitem manipular os elementos do DOM de forma muito ampla. Como orientação geral, é recomendado usar a propriedade innerText quando queremos mudar apenas o texto de um elemento HTML que não possui elementos filhos, pois, caso existam, eles serão substituídos pelo novo texto.

 *Já a propriedade innerHTML é melhor ser usada quando queremos alterar o conteúdo HTML de qualquer elemento do DOM, podendo incluir os elementos filhos, nomes de classe e qualquer outro atributo que os elementos HTML possam receber.

































